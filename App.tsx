// App.tsximport React, { useEffect, useState } from "react";import {  View,  Text,  TextInput,  Button,  ActivityIndicator,  StyleSheet,  Alert,  Platform,  Pressable,  DevSettings,} from "react-native";import { NavigationContainer } from "@react-navigation/native";import { createNativeStackNavigator } from "@react-navigation/native-stack";import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";import {  onAuthStateChanged,  signOut,  createUserWithEmailAndPassword,  signInWithEmailAndPassword,} from "firebase/auth";import { FirebaseError } from "firebase/app"; // <- correct placeimport { auth } from "./firebase/config";     // <- your initialized Auth// -------- Error Boundary (renders a screen instead of crashing hard) --------class ErrorBoundary extends React.Component<React.PropsWithChildren, { error?: Error }> {  constructor(props: React.PropsWithChildren) {    super(props);    this.state = { error: undefined };  }  static getDerivedStateFromError(error: Error) {    return { error };  }  render() {    if (this.state.error) {      return (        <View style={styles.centeredView}>          <Text style={styles.title}>App crashed</Text>          <Text style={{ marginTop: 10 }}>{String(this.state.error.message)}</Text>          <Button title="Retry" onPress={() => this.setState({ error: undefined })} />        </View>      );    }    return this.props.children;  }}// -------- Navigation types --------type RootStackParamList = {  Auth: undefined;  Main: undefined; // tab navigator};const Stack = createNativeStackNavigator<RootStackParamList>();const Tabs = createBottomTabNavigator();// -------- Friendly Firebase error messages --------const getFriendlyErrorMessage = (error: FirebaseError): string => {  switch (error.code) {    case "auth/email-already-in-use":      return "This email is already in use. Try logging in or use a different email.";    case "auth/invalid-email":      return "The email address is not valid.";    case "auth/operation-not-allowed":      return "Email/password sign-in is not enabled.";    case "auth/weak-password":      return "Password must be at least 6 characters.";    case "auth/user-not-found":    case "auth/wrong-password":      return "Invalid email or password.";    case "auth/user-disabled":      return "This account has been disabled.";    case "auth/network-request-failed":      return "Network error. Check your internet connection.";    default:      return `Unexpected error: ${error.message}`;  }};// -------- Auth Screen --------function AuthScreen() {  const [email, setEmail] = useState("");  const [password, setPassword] = useState("");  const [confirmPassword, setConfirmPassword] = useState("");  const [loading, setLoading] = useState(false);  const [message, setMessage] = useState("");  const handleSignUp = async () => {    setMessage("");    if (!email.trim() || !password || !confirmPassword) {      Alert.alert("Input Error", "Please fill in all fields.");      return;    }    if (password !== confirmPassword) {      Alert.alert("Password Mismatch", "Passwords do not match.");      return;    }    if (password.length < 6) {      Alert.alert("Weak Password", "Password should be at least 6 characters.");      return;    }    setLoading(true);    try {      await createUserWithEmailAndPassword(auth, email.trim(), password);      setMessage("Account created successfully!");    } catch (e) {      const friendly = getFriendlyErrorMessage(e as FirebaseError);      Alert.alert("Sign Up Error", friendly);    } finally {      setLoading(false);    }  };  const handleLogin = async () => {    setMessage("");    if (!email.trim() || !password) {      Alert.alert("Input Error", "Please enter your email and password.");      return;    }    setLoading(true);    try {      await signInWithEmailAndPassword(auth, email.trim(), password);      setMessage("Logged in successfully!");    } catch (e) {      const friendly = getFriendlyErrorMessage(e as FirebaseError);      Alert.alert("Login Error", friendly);    } finally {      setLoading(false);    }  };  return (    <View style={styles.container}>      <Text style={styles.title}>Welcome ðŸ‘‹</Text>      <TextInput        placeholder="Email"        autoCapitalize="none"        keyboardType="email-address"        value={email}        onChangeText={setEmail}        style={styles.input}      />      <TextInput        placeholder="Password"        secureTextEntry        value={password}        onChangeText={setPassword}        style={styles.input}      />      <TextInput        placeholder="Confirm Password (for Sign Up)"        secureTextEntry        value={confirmPassword}        onChangeText={setConfirmPassword}        style={styles.input}      />      <Button title={loading ? "Logging In..." : "Log In"} onPress={handleLogin} disabled={loading} />      <View style={{ height: 8 }} />      <Button title={loading ? "Signing Up..." : "Sign Up"} onPress={handleSignUp} disabled={loading} />      {!!message && <Text style={styles.message}>{message}</Text>}      {loading && <ActivityIndicator size="large" style={styles.activityIndicator} />}      {/* Hidden Dev Menu trigger for iOS dev builds */}      {__DEV__ && Platform.OS === "ios" && (        <Pressable          onLongPress={() => DevSettings.reload()}          style={{ marginTop: 12 }}        >          <Text style={{ color: "gray" }}>Long-press here to open Dev Menu</Text>        </Pressable>      )}    </View>  );}// -------- Tab Screens (placeholders) --------function HomeScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Home âœ…</Text>      <Text style={styles.homeText}>Next: show feed / onboarding actions.</Text>    </View>  );}function MatchesScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Matches</Text>      <Text>When you implement matching logic, list matches here.</Text>    </View>  );}function MessagesScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Messages</Text>      <Text>Conversations will appear here.</Text>    </View>  );}function ProfileScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Profile</Text>      <Button title="Sign Out" onPress={() => signOut(auth)} />    </View>  );}function MainTabs() {  return (    <Tabs.Navigator screenOptions={{ headerShown: false }}>      <Tabs.Screen name="Home" component={HomeScreen} />      <Tabs.Screen name="Matches" component={MatchesScreen} />      <Tabs.Screen name="Messages" component={MessagesScreen} />      <Tabs.Screen name="Profile" component={ProfileScreen} />    </Tabs.Navigator>  );}// -------- Root App --------export default function App() {  const [initializing, setInitializing] = useState(true);  const [isAuthed, setIsAuthed] = useState(false);  useEffect(() => {    const unsub = onAuthStateChanged(auth, (user) => {      setIsAuthed(!!user);      if (initializing) setInitializing(false);    });    return unsub;  }, [initializing]);  if (initializing) {    return (      <View style={styles.centeredView}>        <ActivityIndicator size="large" />        <Text style={{ marginTop: 10 }}>Loading user session...</Text>      </View>    );  }  return (    <ErrorBoundary>      <NavigationContainer>        <Stack.Navigator screenOptions={{ headerShown: false }}>          {isAuthed ? (            <Stack.Screen name="Main" component={MainTabs} />          ) : (            <Stack.Screen name="Auth" component={AuthScreen} />          )}        </Stack.Navigator>      </NavigationContainer>    </ErrorBoundary>  );}// -------- Styles --------const styles = StyleSheet.create({  container: { flex: 1, padding: 20, marginTop: 80 },  centeredView: { flex: 1, justifyContent: "center", alignItems: "center" },  title: { fontSize: 24, fontWeight: "600", marginBottom: 12 },  input: {    borderWidth: 1,    borderColor: "#ccc",    marginBottom: 10,    padding: 10,    borderRadius: 8,    backgroundColor: "#fff",  },  message: { marginTop: 16, color: "green" },  activityIndicator: { marginTop: 20 },  homeText: { marginBottom: 20, fontSize: 16, lineHeight: 24 },});