import 'react-native-gesture-handler';import React, { useEffect, useState } from "react";import {  View,  Text,  TextInput,  Button,  ActivityIndicator,  StyleSheet,  Alert,  Pressable,  Platform,  DevSettings,} from "react-native";import { NavigationContainer } from "@react-navigation/native";import { createNativeStackNavigator } from "@react-navigation/native-stack";import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";import {  onAuthStateChanged,  signOut,  createUserWithEmailAndPassword,  signInWithEmailAndPassword,} from "firebase/auth";import { auth, db } from "./firebase/config";import { doc, setDoc, serverTimestamp, getDoc } from "firebase/firestore";import OnboardingScreen from "./screens/Onboarding";// --- Nav types ---type RootStackParamList = {  Auth: undefined;  Onboarding: undefined;  Main: undefined;};const Stack = createNativeStackNavigator<RootStackParamList>();const Tabs = createBottomTabNavigator();// --- Helper for prettier auth errors ---const getFriendly = (code: string, fallback: string) => {  switch (code) {    case "auth/email-already-in-use": return "This email is already in use.";    case "auth/invalid-email": return "The email address is not valid.";    case "auth/operation-not-allowed": return "Email/password sign-in is not enabled.";    case "auth/weak-password": return "Password should be at least 6 characters.";    case "auth/user-not-found":    case "auth/wrong-password": return "Invalid email or password.";    case "auth/user-disabled": return "This account has been disabled.";    case "auth/network-request-failed": return "Network error. Check your connection.";    default: return fallback;  }};// ------------------- Auth Screen -------------------function AuthScreen() {  const [email, setEmail] = useState("");  const [password, setPassword] = useState("");  const [confirmPassword, setConfirmPassword] = useState("");  const [loading, setLoading] = useState(false);  const [message, setMessage] = useState("");  const handleSignUp = async () => {    setMessage("");    if (!email.trim() || !password || !confirmPassword) {      Alert.alert("Input Error", "Please fill in all fields.");      return;    }    if (password !== confirmPassword) {      Alert.alert("Password Mismatch", "Passwords do not match.");      return;    }    if (password.length < 6) {      Alert.alert("Weak Password", "Password should be at least 6 characters.");      return;    }    setLoading(true);    try {      await createUserWithEmailAndPassword(auth, email.trim(), password);      setMessage("Account created!");      // Firestore doc creation is handled by the onAuthStateChanged effect below    } catch (e: any) {      Alert.alert("Sign Up Error", getFriendly(e.code, e.message));    } finally {      setLoading(false);    }  };  const handleLogin = async () => {    setMessage("");    if (!email.trim() || !password) {      Alert.alert("Input Error", "Please enter your email and password.");      return;    }    setLoading(true);    try {      await signInWithEmailAndPassword(auth, email.trim(), password);      setMessage("Logged in!");    } catch (e: any) {      Alert.alert("Login Error", getFriendly(e.code, e.message));    } finally {      setLoading(false);    }  };  return (    <View style={styles.container}>      <Text style={styles.title}>Welcome ðŸ‘‹</Text>      <TextInput        placeholder="Email"        autoCapitalize="none"        keyboardType="email-address"        value={email}        onChangeText={setEmail}        style={styles.input}      />      <TextInput        placeholder="Password"        secureTextEntry        value={password}        onChangeText={setPassword}        style={styles.input}      />      <TextInput        placeholder="Confirm Password (for Sign Up)"        secureTextEntry        value={confirmPassword}        onChangeText={setConfirmPassword}        style={styles.input}      />      <Button title={loading ? "Logging In..." : "Log In"} onPress={handleLogin} disabled={loading} />      <View style={{ height: 8 }} />      <Button title={loading ? "Signing Up..." : "Sign Up"} onPress={handleSignUp} disabled={loading} />      {!!message && <Text style={styles.message}>{message}</Text>}      {loading && <ActivityIndicator size="large" style={styles.activityIndicator} />}      {__DEV__ && Platform.OS === "ios" && (        <Pressable onLongPress={() => DevSettings.reload()} style={{ marginTop: 12 }}>          <Text style={{ color: "gray" }}>Long-press here to reload (dev)</Text>        </Pressable>      )}    </View>  );}// ------------------- Tabs (placeholders) -------------------function HomeScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Home âœ…</Text>      <Text style={styles.homeText}>Next: show feed / onboarding actions.</Text>    </View>  );}function MatchesScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Matches</Text>      <Text>List matches here.</Text>    </View>  );}function MessagesScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Messages</Text>      <Text>Conversations go here.</Text>    </View>  );}function ProfileScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Profile</Text>      <Button title="Sign Out" onPress={() => signOut(auth)} />    </View>  );}function MainTabs() {  return (    <Tabs.Navigator screenOptions={{ headerShown: false }}>      <Tabs.Screen name="Home" component={HomeScreen} />      <Tabs.Screen name="Matches" component={MatchesScreen} />      <Tabs.Screen name="Messages" component={MessagesScreen} />      <Tabs.Screen name="Profile" component={ProfileScreen} />    </Tabs.Navigator>  );}// ------------------- Root App -------------------export default function App() {  const [initializing, setInitializing] = useState(true);  const [isAuthed, setIsAuthed] = useState(false);  const [profileComplete, setProfileComplete] = useState<boolean | null>(null);  useEffect(() => {    const unsub = onAuthStateChanged(auth, async (user) => {      if (!user) {        // signed out        setIsAuthed(false);        setProfileComplete(null);        setInitializing(false);        return;      }      setIsAuthed(true);      try {        const ref = doc(db, "users", user.uid);        const snap = await getDoc(ref);        if (!snap.exists()) {          // create a skeleton profile on first login          await setDoc(ref, {            email: user.email ?? "",            createdAt: serverTimestamp(),            profileCompleted: false,          });          setProfileComplete(false);        } else {          const pc = !!snap.data()?.profileCompleted;          setProfileComplete(pc);        }      } catch (e) {        // If read fails, be safe and force onboarding to avoid bad state        setProfileComplete(false);      } finally {        setInitializing(false);      }    });    return unsub;  }, []);  if (initializing) {    return (      <View style={styles.centeredView}>        <ActivityIndicator size="large" />        <Text style={{ marginTop: 10 }}>Loading user session...</Text>      </View>    );  }  return (    <NavigationContainer>      <Stack.Navigator screenOptions={{ headerShown: false }}>        {!isAuthed ? (          <Stack.Screen name="Auth" component={AuthScreen} />        ) : profileComplete === false ? (          <Stack.Screen name="Onboarding" component={OnboardingScreen} />        ) : (          <Stack.Screen name="Main" component={MainTabs} />        )}      </Stack.Navigator>    </NavigationContainer>  );}const styles = StyleSheet.create({  container: { flex: 1, padding: 20, marginTop: 80 },  centeredView: { flex: 1, justifyContent: "center", alignItems: "center" },  title: { fontSize: 24, fontWeight: "600", marginBottom: 12 },  input: {    borderWidth: 1, borderColor: "#ccc", marginBottom: 10, padding: 10, borderRadius: 8, backgroundColor: "#fff",  },  message: { marginTop: 16, color: "green" },  activityIndicator: { marginTop: 20 },  homeText: { marginBottom: 20, fontSize: 16, lineHeight: 24 },});