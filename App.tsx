// App.tsximport 'react-native-gesture-handler';import React, { useEffect, useState } from "react";import {  View,  Text,  TextInput,  Button,  ActivityIndicator,  StyleSheet,  Alert,} from "react-native";import { NavigationContainer } from "@react-navigation/native";import { createNativeStackNavigator } from "@react-navigation/native-stack";import {  onAuthStateChanged,  signOut,  createUserWithEmailAndPassword,  signInWithEmailAndPassword,} from "firebase/auth";import { FirebaseError } from "firebase/app";import { auth } from "./firebase/config";type RootStackParamList = {  Auth: undefined;  Onboarding: undefined;  Home: undefined;};const Stack = createNativeStackNavigator<RootStackParamList>();// -------- Error Boundary to surface JS errors instead of full app crash ------class AppErrorBoundary extends React.Component<  { children: React.ReactNode },  { error: null | Error }> {  constructor(props: any) {    super(props);    this.state = { error: null };  }  static getDerivedStateFromError(error: Error) {    return { error };  }  componentDidCatch(error: Error, info: any) {    console.error("App crashed:", error, info);  }  render() {    if (this.state.error) {      return (        <View style={[styles.centeredView, { padding: 20 }]}>          <Text style={{ fontSize: 18, fontWeight: "600", marginBottom: 8 }}>            Oops, something went wrong.          </Text>          <Text selectable style={{ color: "crimson" }}>            {String(this.state.error?.message || this.state.error)}          </Text>          <View style={{ height: 16 }} />          <Button title="Reload App" onPress={() => globalThis?.location?.reload?.()} />        </View>      );    }    return this.props.children;  }}// ------------------ Helpers -------------------const friendly = (error: FirebaseError) => {  switch (error.code) {    case "auth/email-already-in-use":      return "This email is already in use.";    case "auth/invalid-email":      return "Invalid email address.";    case "auth/weak-password":      return "Password too weak (min 6 chars).";    case "auth/user-not-found":    case "auth/wrong-password":      return "Invalid email or password.";    default:      return error.message;  }};// ------------------ Screens -------------------function AuthScreen({ navigation }: any) {  const [email, setEmail] = useState("");  const [password, setPassword] = useState("");  const [confirm, setConfirm] = useState("");  const [loading, setLoading] = useState(false);  const doSignUp = async () => {    if (!email.trim() || !password || !confirm) {      Alert.alert("Input Error", "Please fill in all fields.");      return;    }    if (password !== confirm) {      Alert.alert("Password Mismatch", "Passwords do not match.");      return;    }    setLoading(true);    try {      await createUserWithEmailAndPassword(auth, email.trim(), password);      // onAuthStateChanged will handle navigation    } catch (e: any) {      Alert.alert("Sign Up Error", friendly(e));    } finally {      setLoading(false);    }  };  const doLogin = async () => {    if (!email.trim() || !password) {      Alert.alert("Input Error", "Please enter your email and password.");      return;    }    setLoading(true);    try {      await signInWithEmailAndPassword(auth, email.trim(), password);      // onAuthStateChanged will handle navigation    } catch (e: any) {      Alert.alert("Login Error", friendly(e));    } finally {      setLoading(false);    }  };  return (    <View style={styles.container}>      <Text style={styles.title}>Login / Sign Up</Text>      <TextInput        placeholder="Email"        autoCapitalize="none"        keyboardType="email-address"        value={email}        onChangeText={setEmail}        style={styles.input}      />      <TextInput        placeholder="Password"        secureTextEntry        value={password}        onChangeText={setPassword}        style={styles.input}      />      <TextInput        placeholder="Confirm Password (for Sign Up)"        secureTextEntry        value={confirm}        onChangeText={setConfirm}        style={styles.input}      />      <Button title={loading ? "Signing In..." : "Log In"} onPress={doLogin} disabled={loading} />      <View style={{ height: 8 }} />      <Button title={loading ? "Creating..." : "Sign Up"} onPress={doSignUp} disabled={loading} />    </View>  );}function OnboardingScreen({ navigation }: any) {  return (    <View style={styles.container}>      <Text style={styles.title}>Onboarding</Text>      <Text style={{ marginBottom: 16 }}>        (Debug) You should land here after login (not Home). If you see this, routing works.      </Text>      <Button title="Finish Onboarding → Home" onPress={() => navigation.replace("Home")} />    </View>  );}function HomeScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Home</Text>      <Text>Debug: If app crashes upon reaching here, it’s Home-specific.</Text>      <View style={{ height: 12 }} />      <Button title="Sign Out" onPress={() => signOut(auth)} />    </View>  );}// ------------------ App Root -------------------export default function App() {  const [status, setStatus] = useState<"checking" | "unauthed" | "needsOnboarding" | "authed">(    "checking"  );  useEffect(() => {    const unsub = onAuthStateChanged(auth, (user) => {      console.log("[AuthState]", !!user ? "SIGNED IN" : "SIGNED OUT");      if (!user) {        setStatus("unauthed");      } else {        // TEMP: Force onboarding first to avoid the Home flash/crash while we isolate issues.        setStatus("needsOnboarding");      }    });    return unsub;  }, []);  if (status === "checking") {    return (      <View style={styles.centeredView}>        <ActivityIndicator size="large" />        <Text style={{ marginTop: 10 }}>Checking session…</Text>      </View>    );  }  return (    <AppErrorBoundary>      <NavigationContainer>        <Stack.Navigator screenOptions={{ headerShown: false }}>          {status === "unauthed" && <Stack.Screen name="Auth" component={AuthScreen} />}          {status === "needsOnboarding" && (            <Stack.Screen name="Onboarding" component={OnboardingScreen} />          )}          {status === "authed" && <Stack.Screen name="Home" component={HomeScreen} />}        </Stack.Navigator>      </NavigationContainer>    </AppErrorBoundary>  );}const styles = StyleSheet.create({  container: { flex: 1, padding: 20, marginTop: 80 },  centeredView: { flex: 1, justifyContent: "center", alignItems: "center" },  title: { fontSize: 24, fontWeight: "600", marginBottom: 12 },  input: {    borderWidth: 1,    borderColor: "#ccc",    marginBottom: 10,    padding: 10,    borderRadius: 8,    backgroundColor: "#fff",  },});