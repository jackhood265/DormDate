// App.tsx (Expo SDK 53 / React 18.2 / RN 0.76 compatible)import 'react-native-gesture-handler';import React, { useEffect, useState } from 'react';import {  View,  Text,  TextInput,  Button,  ActivityIndicator,  StyleSheet,  Alert,} from 'react-native';import { NavigationContainer } from '@react-navigation/native';import { createNativeStackNavigator } from '@react-navigation/native-stack';import {  onAuthStateChanged,  signOut,  createUserWithEmailAndPassword,  signInWithEmailAndPassword,} from 'firebase/auth';import { auth } from './firebase/config';// --------- Error boundary: shows JS errors on screen ----------class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { error: unknown }> {  constructor(props: { children: React.ReactNode }) {    super(props);    this.state = { error: null };  }  static getDerivedStateFromError(error: unknown) {    return { error };  }  componentDidCatch(error: unknown, info: unknown) {    // still logs in dev builds if Metro is connected    // eslint-disable-next-line no-console    console.error('ErrorBoundary caught:', error, info);  }  render() {    if (this.state.error) {      return (        <View style={{ flex: 1, padding: 20, marginTop: 80 }}>          <Text style={{ fontWeight: '700', fontSize: 18, marginBottom: 10 }}>            Something crashed ðŸ¤•          </Text>          <Text selectable style={{ marginBottom: 10 }}>            {String((this.state.error as any)?.message ?? this.state.error)}          </Text>          <Button title="Reload UI" onPress={() => this.setState({ error: null })} />        </View>      );    }    return this.props.children;  }}// --------- Navigation (untyped for simplicity; fewer TS pitfalls) ----------const Stack = createNativeStackNavigator();function AuthScreen() {  const [email, setEmail] = useState('');  const [password, setPassword] = useState('');  const [confirm, setConfirm] = useState('');  const [loading, setLoading] = useState(false);  const friendly = (e: any) => {    switch (e?.code) {      case 'auth/email-already-in-use':        return 'This email is already in use.';      case 'auth/invalid-email':        return 'Invalid email address.';      case 'auth/weak-password':        return 'Password must be at least 6 characters.';      case 'auth/user-not-found':      case 'auth/wrong-password':        return 'Invalid email or password.';      case 'auth/network-request-failed':        return 'Network error. Check your connection.';      default:        return e?.message ?? 'Unexpected error.';    }  };  const handleSignUp = async () => {    if (!email.trim() || !password || !confirm) {      Alert.alert('Input Error', 'Please fill in all fields.');      return;    }    if (password !== confirm) {      Alert.alert('Password Mismatch', 'Passwords do not match.');      return;    }    setLoading(true);    try {      await createUserWithEmailAndPassword(auth, email.trim(), password);    } catch (e) {      Alert.alert('Sign Up Error', friendly(e));    } finally {      setLoading(false);    }  };  const handleLogin = async () => {    if (!email.trim() || !password) {      Alert.alert('Input Error', 'Please enter your email and password.');      return;    }    setLoading(true);    try {      await signInWithEmailAndPassword(auth, email.trim(), password);    } catch (e) {      Alert.alert('Login Error', friendly(e));    } finally {      setLoading(false);    }  };  return (    <View style={styles.container}>      <Text style={styles.title}>Welcome ðŸ‘‹</Text>      <TextInput        placeholder="Email"        autoCapitalize="none"        keyboardType="email-address"        value={email}        onChangeText={setEmail}        style={styles.input}      />      <TextInput        placeholder="Password"        secureTextEntry        value={password}        onChangeText={setPassword}        style={styles.input}      />      <TextInput        placeholder="Confirm Password (for Sign Up)"        secureTextEntry        value={confirm}        onChangeText={setConfirm}        style={styles.input}      />      <Button title={loading ? 'Logging Inâ€¦' : 'Log In'} onPress={handleLogin} disabled={loading} />      <View style={{ height: 8 }} />      <Button title={loading ? 'Signing Upâ€¦' : 'Sign Up'} onPress={handleSignUp} disabled={loading} />      {loading && <ActivityIndicator size="large" style={styles.activityIndicator} />}    </View>  );}function HomeScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Home âœ…</Text>      <Text style={styles.homeText}>        Minimal stack, no tabs, no onboarding â€” stabilizing build first.      </Text>      <Button title="Sign Out" onPress={() => signOut(auth)} />    </View>  );}export default function App() {  const [initializing, setInitializing] = useState(true);  const [isAuthed, setIsAuthed] = useState(false);  useEffect(() => {    const unsub = onAuthStateChanged(auth, (user) => {      setIsAuthed(!!user);      if (initializing) setInitializing(false);    });    return unsub;  }, [initializing]);  if (initializing) {    return (      <View style={styles.centeredView}>        <ActivityIndicator size="large" />        <Text style={{ marginTop: 10 }}>Loading user sessionâ€¦</Text>      </View>    );  }  return (    <ErrorBoundary>      <NavigationContainer>        <Stack.Navigator screenOptions={{ headerShown: false }}>          {isAuthed ? (            <Stack.Screen name="Home" component={HomeScreen} />          ) : (            <Stack.Screen name="Auth" component={AuthScreen} />          )}        </Stack.Navigator>      </NavigationContainer>    </ErrorBoundary>  );}// --------- Styles ----------const styles = StyleSheet.create({  container: { flex: 1, padding: 20, marginTop: 80 },  centeredView: { flex: 1, justifyContent: 'center', alignItems: 'center' },  title: { fontSize: 24, fontWeight: '600', marginBottom: 12 },  input: {    borderWidth: 1,    borderColor: '#ccc',    marginBottom: 10,    padding: 10,    borderRadius: 8,    backgroundColor: '#fff',  },  homeText: { marginVertical: 16, fontSize: 16 },  activityIndicator: { marginTop: 20 },});