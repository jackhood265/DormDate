// App.tsximport React, { useEffect, useState } from "react";import {  View,  Text,  TextInput,  Button,  ActivityIndicator,  StyleSheet,  Alert,  KeyboardAvoidingView,  Platform,} from "react-native";import { NavigationContainer } from "@react-navigation/native";import { createNativeStackNavigator } from "@react-navigation/native-stack";import {  onAuthStateChanged,  signOut,  createUserWithEmailAndPassword,  signInWithEmailAndPassword,} from "firebase/auth";import { FirebaseError } from "firebase/app"; // ‚Üê move hereimport { auth } from "./firebase/config";type RootStackParamList = { Auth: undefined; Home: undefined };const Stack = createNativeStackNavigator<RootStackParamList>();const getFriendlyErrorMessage = (error: FirebaseError): string => {  switch (error.code) {    case "auth/email-already-in-use":      return "This email is already in use. Try logging in or use a different email.";    case "auth/invalid-email":      return "The email address is not valid.";    case "auth/operation-not-allowed":      return "Email/password sign-in is not enabled.";    case "auth/weak-password":      return "The password is too weak (min 6 characters).";    case "auth/user-not-found":    case "auth/wrong-password":      return "Invalid email or password.";    case "auth/user-disabled":      return "This account has been disabled.";    case "auth/network-request-failed":      return "Network error. Please check your connection.";    default:      return "Something went wrong. Please try again.";  }};function AuthScreen() {  const [email, setEmail] = useState("");  const [password, setPassword] = useState("");  const [confirmPassword, setConfirmPassword] = useState("");  const [loggingIn, setLoggingIn] = useState(false);  const [signingUp, setSigningUp] = useState(false);  const [message, setMessage] = useState("");  const handleSignUp = async () => {    setMessage("");    const e = email.trim().toLowerCase();    if (!e || !password || !confirmPassword) {      Alert.alert("Input Error", "Please fill in all fields.");      return;    }    if (password !== confirmPassword) {      Alert.alert("Password Mismatch", "Passwords do not match.");      return;    }    if (password.length < 6) {      Alert.alert("Weak Password", "Password should be at least 6 characters.");      return;    }    setSigningUp(true);    try {      await createUserWithEmailAndPassword(auth, e, password);      setMessage("Account created successfully!");    } catch (err) {      const firebaseError = err as FirebaseError;      console.warn("SignUp error:", firebaseError); // log raw      Alert.alert("Sign Up Error", getFriendlyErrorMessage(firebaseError));    } finally {      setSigningUp(false);    }  };  const handleLogin = async () => {    setMessage("");    const e = email.trim().toLowerCase();    if (!e || !password) {      Alert.alert("Input Error", "Please enter your email and password.");      return;    }    setLoggingIn(true);    try {      await signInWithEmailAndPassword(auth, e, password);      setMessage("Logged in successfully!");    } catch (err) {      const firebaseError = err as FirebaseError;      console.warn("Login error:", firebaseError);      Alert.alert("Login Error", getFriendlyErrorMessage(firebaseError));    } finally {      setLoggingIn(false);    }  };  return (    <KeyboardAvoidingView      style={{ flex: 1 }}      behavior={Platform.select({ ios: "padding", android: undefined })}    >      <View style={styles.container}>        <Text style={styles.title}>Welcome üëã</Text>        <TextInput          placeholder="Email"          autoCapitalize="none"          keyboardType="email-address"          autoComplete="email"          textContentType="emailAddress"          value={email}          onChangeText={setEmail}          style={styles.input}        />        <TextInput          placeholder="Password"          secureTextEntry          value={password}          onChangeText={setPassword}          autoComplete="password"          textContentType="password"          style={styles.input}        />        <TextInput          placeholder="Confirm Password (for Sign Up)"          secureTextEntry          value={confirmPassword}          onChangeText={setConfirmPassword}          autoComplete="password"          textContentType="password"          style={styles.input}        />        <Button title={loggingIn ? "Logging In..." : "Log In"} onPress={handleLogin} disabled={loggingIn || signingUp} />        <View style={{ height: 8 }} />        <Button title={signingUp ? "Signing Up..." : "Sign Up"} onPress={handleSignUp} disabled={loggingIn || signingUp} />        {!!message && <Text style={styles.message}>{message}</Text>}        {(loggingIn || signingUp) && (          <ActivityIndicator size="large" style={styles.activityIndicator} />        )}      </View>    </KeyboardAvoidingView>  );}function HomeScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>You‚Äôre in ‚úÖ</Text>      <Text style={styles.homeText}>        This is your app‚Äôs ‚Äúhome‚Äù. Next, add tabs/screens for Feed, Matches, Messages, and Profile.      </Text>      <Button title="Sign Out" onPress={() => signOut(auth)} />    </View>  );}export default function App() {  const [initializing, setInitializing] = useState(true);  const [isAuthed, setIsAuthed] = useState(false);  useEffect(() => {    const unsub = onAuthStateChanged(auth, (user) => {      setIsAuthed(!!user);      if (initializing) setInitializing(false);    });    return unsub;  }, [initializing]);  if (initializing) {    return (      <View style={styles.centeredView}>        <ActivityIndicator size="large" />        <Text style={{ marginTop: 10 }}>Loading user session...</Text>      </View>    );  }  return (    <NavigationContainer>      <Stack.Navigator screenOptions={{ headerShown: false }}>        {isAuthed ? (          <Stack.Screen name="Home" component={HomeScreen} />        ) : (          <Stack.Screen name="Auth" component={AuthScreen} />        )}      </Stack.Navigator>    </NavigationContainer>  );}const styles = StyleSheet.create({  container: { flex: 1, padding: 20, marginTop: 80 },  centeredView: { flex: 1, justifyContent: "center", alignItems: "center" },  title: { fontSize: 24, fontWeight: "600", marginBottom: 12 },  input: {    borderWidth: 1,    borderColor: "#ccc",    marginBottom: 10,    padding: 10,    borderRadius: 8,    backgroundColor: "#fff",  },  message: { marginTop: 16, color: "green" },  activityIndicator: { marginTop: 20 },  homeText: { marginBottom: 20, fontSize: 16, lineHeight: 24 },});  