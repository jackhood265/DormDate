// App.tsximport 'react-native-gesture-handler';import React, { useEffect, useState } from "react";import { View, Text, TextInput, Button, ActivityIndicator, StyleSheet, Alert } from "react-native";import { NavigationContainer } from "@react-navigation/native";import { createNativeStackNavigator } from "@react-navigation/native-stack";import { onAuthStateChanged, signOut, createUserWithEmailAndPassword, signInWithEmailAndPassword } from "firebase/auth";import { FirebaseError } from "firebase/app";import { auth } from "./firebase/config";type RootStackParamList = { Auth: undefined; Onboarding: undefined; };const Stack = createNativeStackNavigator<RootStackParamList>();class AppErrorBoundary extends React.Component<{children: React.ReactNode},{error: null|Error}>{  constructor(p:any){super(p);this.state={error:null};}  static getDerivedStateFromError(error:Error){return {error};}  componentDidCatch(error:Error, info:any){console.error("App crashed:", error, info);}  render(){    if(this.state.error){      return (        <View style={[styles.centered,{padding:20}]}>          <Text style={styles.h1}>Crash Caught (JS)</Text>          <Text selectable style={{color:'crimson'}}>{String(this.state.error?.message||this.state.error)}</Text>          <View style={{height:12}}/>          <Button title="Reload" onPress={()=>globalThis?.location?.reload?.()} />        </View>      );    }    return this.props.children;  }}const msg = (e:FirebaseError)=> {  switch(e.code){    case "auth/email-already-in-use": return "Email in use.";    case "auth/invalid-email": return "Invalid email.";    case "auth/weak-password": return "Password too weak.";    case "auth/user-not-found":    case "auth/wrong-password": return "Invalid email or password.";    default: return e.message;  }};function AuthScreen(){  const [email,setEmail]=useState(""); const [password,setPassword]=useState(""); const [confirm,setConfirm]=useState(""); const [loading,setLoading]=useState(false);  const signup=async()=>{ if(!email.trim()||!password||!confirm){Alert.alert("Fill all fields");return;}    if(password!==confirm){Alert.alert("Passwords do not match");return;}    setLoading(true); try{ await createUserWithEmailAndPassword(auth,email.trim(),password);}catch(e:any){Alert.alert("Sign Up Error",msg(e));}finally{setLoading(false);}  };  const login=async()=>{ if(!email.trim()||!password){Alert.alert("Enter email & password");return;}    setLoading(true); try{ await signInWithEmailAndPassword(auth,email.trim(),password);}catch(e:any){Alert.alert("Login Error",msg(e));}finally{setLoading(false);}  };  return (    <View style={styles.page}>      <Text style={styles.h1}>Auth</Text>      <Text style={styles.marker}>BUILD MARKER: CT-ONBOARD-ONLY</Text>      <TextInput style={styles.input} placeholder="Email" autoCapitalize="none" keyboardType="email-address" value={email} onChangeText={setEmail}/>      <TextInput style={styles.input} placeholder="Password" secureTextEntry value={password} onChangeText={setPassword}/>      <TextInput style={styles.input} placeholder="Confirm Password (Sign Up)" secureTextEntry value={confirm} onChangeText={setConfirm}/>      <Button title={loading?"Signing In…":"Log In"} onPress={login} disabled={loading}/>      <View style={{height:8}}/>      <Button title={loading?"Creating…":"Sign Up"} onPress={signup} disabled={loading}/>    </View>  );}function OnboardingScreen(){  return (    <View style={styles.page}>      <Text style={styles.h1}>Onboarding</Text>      <Text style={{marginBottom:16}}>If you see this screen after login, routing is OK and Home is not rendered.</Text>      <Button title="Sign Out" onPress={()=>signOut(auth)} />    </View>  );}export default function App(){  const [state,setState]=useState<"checking"|"unauthed"|"needsOnboarding">("checking");  useEffect(()=>{    const unsub = onAuthStateChanged(auth,(user)=>{      console.log("[AuthState]", user? "SIGNED IN":"SIGNED OUT");      setState(user? "needsOnboarding":"unauthed"); // NEVER go to Home in this build    });    return unsub;  },[]);  if(state==="checking"){    return (<View style={styles.centered}><ActivityIndicator size="large"/><Text style={{marginTop:8}}>Checking session…</Text></View>);  }  return (    <AppErrorBoundary>      <NavigationContainer>        <Stack.Navigator screenOptions={{headerShown:false}}>          {state==="unauthed" && <Stack.Screen name="Auth" component={AuthScreen}/>}          {state==="needsOnboarding" && <Stack.Screen name="Onboarding" component={OnboardingScreen}/>}        </Stack.Navigator>      </NavigationContainer>    </AppErrorBoundary>  );}const styles = StyleSheet.create({  page:{flex:1,padding:20,marginTop:80},  centered:{flex:1,justifyContent:'center',alignItems:'center'},  h1:{fontSize:24,fontWeight:'600',marginBottom:12},  input:{borderWidth:1,borderColor:'#ccc',marginBottom:10,padding:10,borderRadius:8,backgroundColor:'#fff'},  marker:{marginBottom:12,color:'#555'}});