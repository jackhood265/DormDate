import 'react-native-gesture-handler';import React, { useEffect, useState } from "react";import {  View, Text, TextInput, Button, ActivityIndicator,  StyleSheet, Alert, } from "react-native";import { NavigationContainer } from "@react-navigation/native";import { createNativeStackNavigator } from "@react-navigation/native-stack";import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";import {  onAuthStateChanged,  signOut,  createUserWithEmailAndPassword,  signInWithEmailAndPassword,} from "firebase/auth";import { FirebaseError } from "firebase/app";import { auth, db } from "./firebase/config";import { doc, setDoc, serverTimestamp, getDoc } from "firebase/firestore";type RootStackParamList = {  Auth: undefined;  Onboarding: undefined;  Main: undefined; // tab navigator};const Stack = createNativeStackNavigator<RootStackParamList>();const Tabs = createBottomTabNavigator();const getFriendlyErrorMessage = (error: FirebaseError): string => {  switch (error.code) {    case "auth/email-already-in-use":      return "This email address is already in use. Try logging in or use a different email.";    case "auth/invalid-email":      return "The email address is not valid.";    case "auth/operation-not-allowed":      return "Email/password sign-in is not enabled. Please contact support.";    case "auth/weak-password":      return "The password is too weak. Please use at least 6 characters.";    case "auth/user-not-found":    case "auth/wrong-password":      return "Invalid email or password.";    case "auth/user-disabled":      return "This account has been disabled.";    case "auth/network-request-failed":      return "Network error. Please check your internet connection.";    default:      return `An unexpected error occurred: ${error.message}`;  }};function AuthScreen() {  const [email, setEmail] = useState("");  const [password, setPassword] = useState("");  const [confirmPassword, setConfirmPassword] = useState("");  const [loading, setLoading] = useState(false);  const [message, setMessage] = useState("");  const handleSignUp = async () => {    setMessage("");    if (!email.trim() || !password || !confirmPassword) {      Alert.alert("Input Error", "Please fill in all fields.");      return;    }    if (password !== confirmPassword) {      Alert.alert("Password Mismatch", "Passwords do not match.");      return;    }    if (password.length < 6) {      Alert.alert("Weak Password", "Password should be at least 6 characters.");      return;    }    setLoading(true);    try {      const cred = await createUserWithEmailAndPassword(auth, email.trim(), password);      const uid = cred.user.uid;      const ref = doc(db, "users", uid);      // Create the user doc with onboardingComplete=false on first signup.      await setDoc(ref, {        email: cred.user.email ?? email.trim(),        createdAt: serverTimestamp(),        onboardingComplete: false,      }, { merge: true });      setMessage("Account created successfully!");    } catch (e) {      const firebaseError = e as FirebaseError;      Alert.alert("Sign Up Error", getFriendlyErrorMessage(firebaseError));    } finally {      setLoading(false);    }  };  const handleLogin = async () => {    setMessage("");    if (!email.trim() || !password) {      Alert.alert("Input Error", "Please enter your email and password.");      return;    }    setLoading(true);    try {      await signInWithEmailAndPassword(auth, email.trim(), password);      setMessage("Logged in successfully!");    } catch (e) {      const firebaseError = e as FirebaseError;      Alert.alert("Login Error", getFriendlyErrorMessage(firebaseError));    } finally {      setLoading(false);    }  };  return (    <View style={styles.container}>      <Text style={styles.title}>Welcome ðŸ‘‹</Text>      <TextInput        placeholder="Email"        autoCapitalize="none"        keyboardType="email-address"        value={email}        onChangeText={setEmail}        style={styles.input}      />      <TextInput        placeholder="Password"        secureTextEntry        value={password}        onChangeText={setPassword}        style={styles.input}      />      <TextInput        placeholder="Confirm Password (for Sign Up)"        secureTextEntry        value={confirmPassword}        onChangeText={setConfirmPassword}        style={styles.input}      />      <Button title={loading ? "Logging In..." : "Log In"} onPress={handleLogin} disabled={loading} />      <View style={{ height: 8 }} />      <Button title={loading ? "Signing Up..." : "Sign Up"} onPress={handleSignUp} disabled={loading} />      {!!message && <Text style={styles.message}>{message}</Text>}      {loading && <ActivityIndicator size="large" style={styles.activityIndicator} />}    </View>  );}/** ---------- Tabs ---------- **/function HomeScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Home âœ…</Text>      <Text style={styles.homeText}>Next: show feed / onboarding actions.</Text>    </View>  );}function MatchesScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Matches</Text>      <Text>When you implement matching logic, list matches here.</Text>    </View>  );}function MessagesScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Messages</Text>      <Text>Conversations will appear here.</Text>    </View>  );}function ProfileScreen() {  return (    <View style={styles.container}>      <Text style={styles.title}>Profile</Text>      <Button title="Sign Out" onPress={() => signOut(auth)} />    </View>  );}function MainTabs() {  return (    <Tabs.Navigator screenOptions={{ headerShown: false }}>      <Tabs.Screen name="Home" component={HomeScreen} />      <Tabs.Screen name="Matches" component={MatchesScreen} />      <Tabs.Screen name="Messages" component={MessagesScreen} />      <Tabs.Screen name="Profile" component={ProfileScreen} />    </Tabs.Navigator>  );}/** ---------- Onboarding (existing file) ---------- **/function OnboardingScreenWrapper() {  // If you already created `screens/Onboarding.tsx`, import and use it directly instead:  // return <Onboarding />;  return (    <View style={styles.container}>      <Text style={styles.title}>Onboarding</Text>      <Text style={{ marginBottom: 16 }}>Collect profile basics hereâ€¦</Text>      <Button title="Complete Onboarding" onPress={async () => {        const u = auth.currentUser;        if (!u) return;        await setDoc(doc(db, "users", u.uid), { onboardingComplete: true }, { merge: true });      }} />    </View>  );}/** ---------- Root App: gate on auth + profile ---------- **/export default function App() {  const [initializingAuth, setInitializingAuth] = useState(true);  const [checkingProfile, setCheckingProfile] = useState(false);  const [isAuthed, setIsAuthed] = useState(false);  const [shouldOnboard, setShouldOnboard] = useState(false);  useEffect(() => {    const unsub = onAuthStateChanged(auth, (user) => {      setIsAuthed(!!user);      setInitializingAuth(false);      if (user) {        setCheckingProfile(true);        getDoc(doc(db, "users", user.uid))          .then((snap) => {            const data = snap.data();            // Default to onboarding if field is missing            setShouldOnboard(!(data && data.onboardingComplete === true));          })          .catch(() => {            // Fail safe: send to onboarding (so we donâ€™t mount Main and crash)            setShouldOnboard(true);          })          .finally(() => setCheckingProfile(false));      } else {        setCheckingProfile(false);        setShouldOnboard(false);      }    });    return unsub;  }, []);  if (initializingAuth || checkingProfile) {    return (      <View style={styles.centeredView}>        <ActivityIndicator size="large" />        <Text style={{ marginTop: 10 }}>Loadingâ€¦</Text>      </View>    );  }  return (    <NavigationContainer>      <Stack.Navigator screenOptions={{ headerShown: false }}>        {!isAuthed ? (          <Stack.Screen name="Auth" component={AuthScreen} />        ) : shouldOnboard ? (          <Stack.Screen name="Onboarding" component={OnboardingScreenWrapper} />        ) : (          <Stack.Screen name="Main" component={MainTabs} />        )}      </Stack.Navigator>    </NavigationContainer>  );}const styles = StyleSheet.create({  container: { flex: 1, padding: 20, marginTop: 80 },  centeredView: { flex: 1, justifyContent: "center", alignItems: "center" },  title: { fontSize: 24, fontWeight: "600", marginBottom: 12 },  input: {    borderWidth: 1, borderColor: "#ccc", marginBottom: 10,    padding: 10, borderRadius: 8, backgroundColor: "#fff",  },  message: { marginTop: 16, color: "green" },  activityIndicator: { marginTop: 20 },  homeText: { marginBottom: 20, fontSize: 16, lineHeight: 24 },});